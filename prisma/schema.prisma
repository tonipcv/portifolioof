// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  password      String?     // Add this field
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  portfolios    Portfolio[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  resetToken    String?
  resetTokenExpiry DateTime?
  stripeCustomerId String?  @unique
  subscriptionStatus String? @default("free") // 'free' | 'premium'
  subscriptionId    String?
  subscriptionEndDate DateTime?

  @@map("User")
}

model Portfolio {
  id          String    @id @default(cuid())
  name        String
  description String?
  cryptos     Crypto[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  totalValue  Float     @default(0)
  totalProfit Float     @default(0)
  userId      String    // Agora obrigatório novamente
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Crypto {
  id                        String    @id @default(cuid())
  coinId                    String    // mantendo o campo existente
  amount                    Float
  investedValue            Float
  averagePrice             Float     @default(0)
  currentPrice             Float     @default(0)
  profit                   Float     @default(0)
  priceChangePercentage24h Float?
  priceChangePercentage7d  Float?
  marketCap                Float?
  totalVolume              Float?
  image                    String?
  name                     String?
  symbol                   String?
  portfolio                Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  portfolioId              String
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  @@index([portfolioId])
  @@index([coinId])  // adicionando índice para melhor performance
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
